// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'config/auth_config.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  // Firebase configuration from centralized config
  static FirebaseOptions get web => FirebaseOptions(
        apiKey: AuthConfig.firebase.webApiKey,
        appId: AuthConfig.firebase.webAppId,
        messagingSenderId: AuthConfig.firebase.webMessagingSenderId,
        projectId: AuthConfig.firebase.webProjectId,
        authDomain: AuthConfig.firebase.webAuthDomain,
        storageBucket: AuthConfig.firebase.webStorageBucket,
      );

  static FirebaseOptions get android => FirebaseOptions(
        apiKey: AuthConfig.firebase.androidApiKey,
        appId: AuthConfig.firebase.androidAppId,
        messagingSenderId: AuthConfig.firebase.androidMessagingSenderId,
        projectId: AuthConfig.firebase.androidProjectId,
        storageBucket: AuthConfig.firebase.androidStorageBucket,
      );

  static FirebaseOptions get ios => FirebaseOptions(
        apiKey: AuthConfig.firebase.iosApiKey,
        appId: AuthConfig.firebase.iosAppId,
        messagingSenderId: AuthConfig.firebase.iosMessagingSenderId,
        projectId: AuthConfig.firebase.iosProjectId,
        storageBucket: AuthConfig.firebase.iosStorageBucket,
        iosClientId: AuthConfig.firebase.iosClientId,
        iosBundleId: AuthConfig.firebase.iosBundleId,
      );

  static FirebaseOptions get macos => FirebaseOptions(
        apiKey: AuthConfig.firebase.macosApiKey,
        appId: AuthConfig.firebase.macosAppId,
        messagingSenderId: AuthConfig.firebase.macosMessagingSenderId,
        projectId: AuthConfig.firebase.macosProjectId,
        storageBucket: AuthConfig.firebase.macosStorageBucket,
        iosClientId: AuthConfig.firebase.macosClientId,
        iosBundleId: AuthConfig.firebase.macosBundleId,
      );

  static FirebaseOptions get windows => FirebaseOptions(
        apiKey: AuthConfig.firebase.windowsApiKey,
        appId: AuthConfig.firebase.windowsAppId,
        messagingSenderId: AuthConfig.firebase.windowsMessagingSenderId,
        projectId: AuthConfig.firebase.windowsProjectId,
        storageBucket: AuthConfig.firebase.windowsStorageBucket,
      );
}
